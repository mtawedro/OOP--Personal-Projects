/****************************
Name: Martina Tawedrous
Date: November 28 2017
Student Number: 0977473
Guelph email: mtawedro@uoguelph.ca
**REFERENCE**: --Undirected Graphs Algorhims C++ 4th edition
****************************/

// A Java Program to detect cycle in an undirected graph
import java.io.*;
import java.util.*;
 
// This class represents a directed graph using adjacency list
// representation
class Graph
{
    private int V;   // Number. of vertices
    private LinkedList<Integer> adj[]; // Adjacency List Represntation
 
    // Constructor
    Graph() {
      
    }
 
    
    void VertEdge()
    {
    // Mark the current node as visited and print it
    visited[v] = true;
    System.out.println(" ");
   }
  
    // Function to add an edge into the graph
    void addEdge(int v,int w) {
        adj[v].add(w);
        adj[w].add(v);
    }
 
    // A recursive function that uses visited[] and parent to detect
    // cycle in subgraph that's reachable from vertex v.
    Boolean isCyclic(int v, Boolean visited[], int parent)
    {
        // Mark the current node as visited
        visited[v] = true;
        Integer i;
 
        // all the vertices adjacent to this vertex
        Iterator<Integer> it = adj[v].iterator();
        while (it.hasNext())
        {
            i = it.next();
 
            // If an adjacent is not visited, then recur for that adjacent feild
            if (!visited[i])
            {
                if (isCyclic(i, visited, v))
                    return true;
            }
 
            // If an adjacent is visited and not parent of current
            // vertex, then there is a cycle.
            else if (i != parent)
                return true;
        }
        return false;
    }
 
    // Returns true if the graph contains a cycle, else false.
    Boolean isCyclic()
    {
        // Mark all the vertices as not visited
        Boolean visited[] = new Boolean[V];
        for (int i = 0; i < V; i++)
            visited[i] = false;
 
        // Call the recursive function to detect cycle
        for (int x = 0; x < V; x++)
            if (!visited[x]) // Don't recur for if already visited
                if (isCyclic(x, visited, -1))
                    return true;
 
        return false;
    }
 
 
    public static void main(String args[])
    {
        // Create a graph given in the above diagram
         Graph g1 = new Graph();
       
     //reads in matrix from file
     public static void main(String[] args) 
        throws java.io.FileNotFoundException{
        // TODO Auto-generated method stub
        Scanner input = new Scanner (new File("src/array.txt"));
       ArrayList <Integer> input = new ArrayList();
        while (input.next()!=null){
            for (int i=0;i<m;i++){
                for (int j=0;j<n;j++)
                    a[i][j]= input.nextInt();
            }   

        }
  
         g1.VertEdge();
         g1.AddEdge(i,j);
        flag =  g1.isCyclic(j, input, int i)
       
if(flag == false)
{      
   System.out.println(edges + "edges" + x + "Pendent vertcies" + "largest degree" + y + "No Eular Path")
}
else
{
    System.out.println(edges + "edges" + x + "Pendent vertcies" + "largest degree" + y + "Has Eular Path")
}


}//end of class